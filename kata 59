// 59: Reflect - apply 
// To do: make all tests pass, leave the assert lines unchanged!

describe('`Reflect.apply` calls a target function', function() {
  it('it is a static method', function() {
    const expectedType = 'function';
    assert.equal(typeof Reflect.apply, expectedType)
  
    });// shows Reflect.apply is a function

  describe('the 1st parameter', () => {
    it('is a callable, e.g. a function', () => {
      let fn=()=>{return 42};
      assert.equal(Reflect.apply(fn, void 0, []), 42);
      
    });// allows you to pass in a function and add an arg
    
    it('passing it a non-callable throws a TypeError', function() {
      const applyOnUncallable = () =>
        Reflect.apply("", void 0, []);
      assert.throws(applyOnUncallable, TypeError);
    });
  });// have to throw a valid function.

  describe('the 2nd parameter', () => {
    it('is the scope (or the `this`)', function() {
      class FourtyTwo {
        constructor() { this.value = 42}
        fn() {return this.value}
      }
      let instance = new FourtyTwo();
      const fourtyTwo = Reflect.apply(instance.fn, instance, []);
      assert.deepEqual(fourtyTwo, 42);
    });
  });// passes instance.fn which is function, and instance as 2nd which returns 42

  describe('the 3rd parameter', () => {
    it('must be an array (or array-like)', () => {
      const thirdParam = ['should be array-like'];
      assert.doesNotThrow(() => Reflect.apply(() => void 0, null, thirdParam));
   
    });// third param in reflect.apply needs to be array 
    
    it('is an array of parameters passed to the call', function() {
      let emptyArrayWithFiveElements = Reflect.apply(Array,undefined,[5]);
      assert.deepEqual(emptyArrayWithFiveElements.fill(42), [42, 42, 42, 42, 42]);
    });
  });// added params to Reflect.apply, Array = function, undefined = arg, [5] = number of items in array

  describe('example usages', () => {
    it('simple function call', () => {
      const fn = () => 'the return value';
      assert.equal(Reflect.apply(fn, void 0, []), 'the return value');
    
    }); // changed the return statement of fn
