// 60: Reflect - getPrototypeOf 
// To do: make all tests pass, leave the assert lines unchanged!

describe('`Reflect.getPrototypeOf` returns the prototype', function() {
  it('works like `Object.getPrototypeOf`', function() {
    const viaObject = Object.getPrototypeOf({});
    const viaReflect = Reflect.getPrototypeOf({});
    assert.strictEqual(viaObject, viaReflect);
  
  });// both return Object.prototype
  
  it('throws a TypeError for a non-object', function() {
    let fn = () => { Reflect.getPrototypeOf() };
    assert.throws(fn, TypeError);
  
  }); // throws TypeError when anything but {} is passed in
  
  it('a `new Set()` has a prototype', function() {
    const aSet = new Set();
    assert.equal(Reflect.getPrototypeOf(aSet), Set.prototype);
  
  });// shows a new object contains a prototype
  
  it('for a class, it is `Klass.prototype`', function() {
    class Klass {}
    const proto = Reflect.getPrototypeOf(new Klass());
    assert.equal(proto, Klass.prototype);
  
  });// works for classes
  
  it('works also for an old-style "class"', function() {
    function Klass() {}
    const proto = Reflect.getPrototypeOf(new Klass());
    assert.equal(proto, Klass.prototype);
  
  }); //works for old class creation way too
  
  it('an array has a prototype too', function() {
    let arr = [];
    const expectedProto = Array.prototype;
    assert.equal(Reflect.getPrototypeOf(arr), expectedProto);
  
  });// had to add .prototype to Array to get both to equal
